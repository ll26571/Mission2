using System;

public class Complex
{ 
    /// <summary>
    /// 默认构造函数
    /// </summary>
    public Complex()
        : this(0, 0) { }
 
    /// <summary>
    /// 只有实部的构造函数
    /// </summary>
    /// <param name="real">实部</param>
    public Complex(double real)
        : this(real, 0) { }
 
    /// <summary>
    /// 由实部和虚部构造
    /// </summary>
    /// <param name="real">实部</param>
    /// <param name="image">虚部</param>
    public Complex(double real, double image)
    {
        this.real = real;
        this.image = image;
    }
 
    private double real;
    /// <summary>
    /// 复数的实部
    /// </summary>
    public double Real
    {
        get { return real; }
        set { real = value; }
    }
 
    private double image;
    /// <summary>
    /// 复数的虚部
    /// </summary>
    public double Image
    {
        get { return image; }
        set { image = value; }
    }
 
    ///重载加法
    public static Complex operator +(Complex c1, Complex c2)
    {
        return new Complex(c1.real + c2.real, c1.image + c2.image);
    }
 
    ///重载减法
    public static Complex operator -(Complex c1, Complex c2)
    {
        return new Complex(c1.real - c2.real, c1.image - c2.image);
    }
 
    ///重载乘法
    public static Complex operator *(Complex c1, Complex c2)
    {
        return new Complex(c1.real * c2.real - c1.image * c2.image, c1.image * c2.real + c1.real * c2.image);
    }
 
    ///重载除法
    public static Complex operator /(Complex c1, Complex c2)  
    {  
		double c3.real=(c1.real * c2.real + c1.image * c2.image)/(c2.real*c2.real+c2.image *c2.image);
		double c3.image=(c1.image * c2.real - c1.real * c2.image)/(c2.real*c2.real+c2.image *c2.image);
        return new Complex(c3.real,c3.image);  
    }
 
    ///幂运算
	public static Complex Power (Complex c,int y)
	{
			Complex temp = c;
			if(y == 0)
			{
				return new Complex(1, 0);
			}
			else if (y > 0)
			{
				for (int i = 1; i < y; i++)
				{
					temp *= c;
				}
			}
			return temp;
	)
	
}
